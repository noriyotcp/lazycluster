# Project Guidelines

## Documentation Requirements

- Update relevant documentation in `/docs` when modifying features.
- Keep `README.md` in sync with new capabilities.
- Create ADRs in `/docs/adr` for significant architectural decisions.

## Architecture Decision Records

Create ADRs in `/docs/adr` for:

- Major dependency changes
- Architectural pattern changes
- New integration patterns
- Data storage schema changes

Follow the template in `/docs/adr/template.md` (create this template file).

## Code Style & Patterns

- Follow project coding standards with emphasis on modular, component-based architecture (React components).
- Use TypeScript best practices; enforce clear typing and consistent naming conventions.
- Prefer composition over inheritance.
- Utilize React Hooks for managing component state and side effects.
- Follow a consistent error handling pattern.
- Define React components using arrow function syntax.

## Testing Standards

- Unit tests required for core business logic.
- Integration tests for API endpoints and extension-specific functionalities.
- End-to-end tests for critical user flows.

## Development Workflow

- Cline helps write and review code changes
- Pay close attention to UI feedback from the user and address it promptly.
- Before completing a task, thoroughly test the UI to ensure that all elements are displayed correctly and that all functionalities are working as expected.
- After making changes, always test the application to ensure that all functionalities are working as expected.
- Before completing a task, verify that all acceptance criteria have been met.
- Memory bank files should be reviewed and updated when discovering new project patterns, after implementing significant changes, when the user requests with "update memory bank", and when context needs clarification.
- When modifying tab management logic, ensure that all edge cases are handled correctly, such as tabs in different windows.
- If `replace_in_file` fails, consider using `write_to_file` to rewrite the entire file.
- UI misalignment can be caused by unexpected CSS scope.
- The SEARCH block in `replace_in_file` must exactly match the file content.
- `chrome.tabs.get` API can be used to get tab information from tab ID.
- When writing code comments, include a “Why not” explanation to highlight the rationale behind non-obvious decisions. Comments should not simply state what the code does; instead, they must provide insight into why a particular approach was chosen—especially for complex or non-intuitive parts of the code.
  - This follows Takuto Wada’s recommendation from https://x.com/t_wada/status/904916106153828352 and aligns with best practices described in [the Swimm article](https://swimm.io/learn/code-collaboration/comments-in-code-best-practices-and-mistakes-to-avoid), ensuring that comments add real value for future maintainers.
  - Code comments should be written in English.

## Commit Description Guidelines

Commit description should:

- Suggested before committing changes
- Be a bullet list.
- Start with a verb.
- Not use "I" or "We".

Commit message should:

- Be a single line.
- Be created from the commit description.

## Commit Message Example

- feat: Add user profile page
- style: Update user profile page layout
- fix: Fix user profile page layout
- refactor: Improve code readability in user authentication
- docs: Update API documentation for user profile
- test: Add unit tests for user registration
- chore: Update dependencies
- perf: Improve loading speed of user profile page
- ci: Configure CI/CD pipeline
